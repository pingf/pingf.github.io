<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ssh反向代理]]></title>
    <url>%2F2017%2F07%2F26%2Fssh%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[使用ssh做反向隧道的方式非常容易, 1ssh -o PubkeyAuthentication=no &lt;user&gt;@&lt;ip&gt; -p &lt;ssh_port&gt; -D &lt;tunnel_port&gt; -f -C -q -N 之后, 用switchy_omega之类的工具来配置就可以，隧道是socks5协议的，配置起来和shadowsocks类似]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dash学习笔记1]]></title>
    <url>%2F2017%2F07%2F05%2Fdash%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%2F</url>
    <content type="text"><![CDATA[最近实验了一下plotly出品的dash, 相当不错, 正是俺们想要的.简单来说, 就是一个可以不用写html,js的纯python展示框架. 安装12345pip install dash==0.17.7 # The core dash backendpip install dash-renderer==0.7.3 # The dash front-endpip install dash-html-components==0.6.2 # HTML componentspip install dash-core-components==0.5.3 # Supercharged componentspip install plotly==2.0.12 # Plotly graphing library used in examples 可以看到dash的不同部分被拆散到不同的包中去咯.dash 为我们提供了两种组件, core组件和html组件, core组件为ploty相关的图表组件, html为基础的div, p这样的组件. 布局123456789101112131415161718192021222324252627282930# -*- coding: utf-8 -*-import dashimport dash_core_components as dccimport dash_html_components as htmlapp = dash.Dash()app.layout = html.Div(children=[ html.H1(children='Hello Dash'), html.Div(children=''' Dash: A web application framework for Python. '''), dcc.Graph( id='example-graph', figure=&#123; 'data': [ &#123;'x': [1, 2, 3], 'y': [4, 1, 2], 'type': 'bar', 'name': 'SF'&#125;, &#123;'x': [1, 2, 3], 'y': [2, 4, 5], 'type': 'bar', 'name': u'Montréal'&#125;, ], 'layout': &#123; 'title': 'Dash Data Visualization' &#125; &#125; )])if __name__ == '__main__': app.run_server(debug=True) 简化后, app的布局可以写成如下的样子 123456789101112Div([ H1('Hello Dash'), Div(Dash: A web application framework for Python'), Graph( id='example-graph', figure=&#123; .... &#125; )]) 交互上面的例子并不具备交互性, 如果我们想要使用一个按钮去触发某个图表,需要使用callback装饰器(早期的版本叫react装饰器) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import dashfrom dash_core_components import Graphfrom dash_html_components import Div, H1, Buttonimport randomapp = dash.Dash()def gen(i): return &#123;'x': [1, 2, 3], 'y': [random.randint(1, 10) for i in range(3)], 'type': 'bar', 'name': str(i)&#125;app.layout =Div(children=[ H1('Hello Dash'), Div(''' Dash: A web application framework for Python. '''), Graph( id='graph', figure=&#123; 'data': [gen(i) for i in range(3)], 'layout': &#123; 'title': 'Dash Data Visualization' &#125; &#125; ), Div(children=[ Button('update', id='update') ], style=&#123;'textAlign': 'right'&#125; )])@app.callback( dash.dependencies.Output(component_id='graph', component_property='figure'), events=[dash.dependencies.Event(component_id='update', component_event='click')])def update(): figure=&#123; 'data': [gen(i) for i in range(3)], 'layout': &#123; 'title': 'Dash Data Visualization' &#125; &#125; return figureif __name__ == '': app.run_server(debug=True) callback 有几个参数, output, inputs, state(为啥这个不是states呢), events. 除了output其它都是接受列表.return的值应该和output中component_property中的值对应. 这里只展示如何处理button的click事件, 不作过多的展开.另外例子中的注意style的设置方式. 展示效果]]></content>
      <tags>
        <tag>python</tag>
        <tag>dash</tag>
        <tag>plotly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用python获取ip的几种方式]]></title>
    <url>%2F2017%2F07%2F04%2F%E4%BD%BF%E7%94%A8python%E8%8E%B7%E5%8F%96ip%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[使用python获取ip的几种方式方式一使用系统调用 123456789101112import osf = os.popen('ifconfig eth0 | grep "inet\ addr" | cut -d: -f2 | cut -d" " -f1')your_ip=f.read()print(your_ip)import osimport reipv4 = re.search(re.compile(r'(?&lt;=inet )(.*)(?=\/)', re.M), os.popen('ip addr show eth0').read()).groups()[0]ipv6 = re.search(re.compile(r'(?&lt;=inet6 )(.*)(?=\/)', re.M), os.popen('ip addr show eth0').read()).groups()[0]print(ipv4)print(ipv6) 方式二使用socket连接dns服务器 123456import socketdef get_ip_address(): s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.connect(("114.114.114.114", 80)) return s.getsockname()[0]print(get_ip_address()) 方式三使用socket, 但不连接远端的服务器 1234567891011121314import socketimport fcntlimport structdef get_ip_address(ifname): s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) return socket.inet_ntoa(fcntl.ioctl( s.fileno(), 0x8915, # SIOCGIFADDR struct.pack('256s', ifname[:15].encode('utf8')) )[20:24])ip = get_ip_address('eth0') print(ip)]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My New Post]]></title>
    <url>%2F2017%2F07%2F03%2FMy-New-Post%2F</url>
    <content type="text"><![CDATA[欢迎使用 Cmd - 在线 Markdown 编辑阅读器 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 书写一个质能守恒公式[^LaTeX]高亮一段代码[^code]$$E=mc^2$$ 1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 绘制表格 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右测的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2014 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。]]></content>
  </entry>
</search>